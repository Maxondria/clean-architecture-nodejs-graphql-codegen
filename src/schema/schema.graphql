enum TodoStatus {
  UNDONE
  DONE
}

type Todo {
  id: ID!
  ownerId: ID!
  title: String!
  status: TodoStatus!
  dueDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  owner: User
}

type User {
  id: ID!
  email: String!
  createdAt: DateTime
  updatedAt: DateTime
  todos: [Todo]
}

scalar DateTime

input CreateTodoRequest {
  ownerId: ID!
  title: String!
  dueDate: DateTime
}

type CreateTodoResponse {
  todo: Todo
}

input DoneTodoRequest {
  id: ID!
}

type DoneTodoResponse {
  todo: Todo!
}

input UndoneTodoRequest {
  id: ID!
}

type UndoneTodoResponse {
  todo: Todo!
}

input DeleteTodoRequest {
  id: ID!
}

type DeleteTodoResponse {
  todo: Todo!
}

type Mutation {
  createTodo(input: CreateTodoRequest): CreateTodoResponse
  createUser(input: CreateUserRequest): CreateUserResponse
  deleteTodo(input: DeleteTodoRequest): DeleteTodoResponse
  doneTodo(input: DoneTodoRequest): DoneTodoResponse
  undoneTodo(input: UndoneTodoRequest): UndoneTodoResponse
}

type Query {
  todo(id: ID!): Todo
  user(id: ID!): User
}

input CreateUserRequest {
  email: String!
}

type CreateUserResponse {
  user: User
}
